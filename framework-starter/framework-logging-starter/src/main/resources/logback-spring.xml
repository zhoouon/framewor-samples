<!--<?xml version="1.0" encoding="UTF-8"?>-->
<!--&lt;!&ndash; 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出 &ndash;&gt;-->
<!--&lt;!&ndash; scan:当此属性设置为true时，配置文档如果发生改变，将会被重新加载，默认值为true &ndash;&gt;-->
<!--&lt;!&ndash; scanPeriod:设置监测配置文档是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 &ndash;&gt;-->
<!--&lt;!&ndash; debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 &ndash;&gt;-->
<!--<configuration  scan="true" scanPeriod="10 seconds">-->

<!--    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        <encoder>-->
<!--            <pattern>%black(控制台-) %d{yyyy-MM-dd HH:mm:ss.SSS} %green([%thread]) %highlight(%-5level) [%X{traceId}] %boldMagenta(%logger{100}) [%M] Line:%-3L - %cyan(%msg%n)</pattern>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash;每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使用设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改,可以通过%contextName来打印日志上下文名称。&ndash;&gt;-->
<!--    <contextName>logback-spring</contextName>-->

<!--    &lt;!&ndash; 配置日志文件保存位置 &ndash;&gt;-->
<!--    &lt;!&ndash; 方式一：直接本配置文件配置，name的值是变量的名称，value的值时变量定义的值。通过定义的值会被插入到logger上下文中。定义后，可以使“${}”来使用变量。 &ndash;&gt;-->
<!--    <property name="ROOT" value="logs"/>-->
<!--    &lt;!&ndash; 方式二：properties配置文件定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径。resource指定配置文件，source配置文件内参数key &ndash;&gt;-->
<!--    &lt;!&ndash;  <property resource="application.properties"/>-->
<!--     <springProperty scope="context" name="LOG_PATH" source="kjcc.loggingPath"/>-->
<!--  &ndash;&gt;-->

<!--    &lt;!&ndash; 0. 日志格式和颜色渲染 &ndash;&gt;-->
<!--    &lt;!&ndash; 彩色日志依赖的渲染类 &ndash;&gt;-->
<!--    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>-->
<!--    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter"/>-->
<!--    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter"/>-->
<!--    &lt;!&ndash; 彩色日志格式 &ndash;&gt;-->
<!--    &lt;!&ndash; %d{yyyy-MM-dd HH:mm:ss.SSS}——日志输出时间; %thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用; %-5level——日志级别，并且使用5个字符靠左对齐; %logger{36}——日志输出者的名字; %M——方法名; %msg——日志消息; %n——平台的换行符; &ndash;&gt;-->
<!--    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} [%X{traceId}] %clr(-&#45;&#45;){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(-[%M] Line:%-3L-){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>-->

<!--    &lt;!&ndash;1. 输出到控制台&ndash;&gt;-->
<!--    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">-->
<!--        &lt;!&ndash;此日志appender是为开发使用，只配置最底级别，控制台输出的日志级别是大于或等于此级别的日志信息&ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">-->
<!--            <level>debug</level>-->
<!--        </filter>-->

<!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            &lt;!&ndash;指定日志格式,可引用也可直接写&ndash;&gt;-->
<!--            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>-->
<!--            &lt;!&ndash;设置字符集&ndash;&gt;-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--    </appender>-->

<!--    &lt;!&ndash;2. 输出到文档&ndash;&gt;-->
<!--    &lt;!&ndash;-->
<!--        说明：-->
<!--              1、日志级别及文件-->
<!--                日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中-->
<!--                  例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，-->
<!--                  日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名-->
<!--                  例如log-level-2013-12-21.0.log-->
<!--                  其它级别的日志也是如此。-->
<!--              2、文件路径-->
<!--                  若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。-->
<!--                  若部署到Tomcat下，则在Tomcat下的logs文件中-->
<!--              3、Appender-->
<!--                  ERROR_FILE对应error级别，文件名以log-error-xxx.log形式命名-->
<!--                  WARN_FILE对应warn级别，文件名以log-warn-xxx.log形式命名-->
<!--                  INFO_FILE对应info级别，文件名以log-info-xxx.log形式命名-->
<!--                  DEBUG_FILE对应debug级别，文件名以log-debug-xxx.log形式命名-->
<!--                  CONSOLE将日志信息输出到控制上，为方便开发测试使用-->
<!--    &ndash;&gt;-->
<!--    &lt;!&ndash; 2.1 level为 DEBUG 日志，时间滚动输出 &ndash;&gt;-->
<!--    <appender name="DEBUG_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 正在记录的日志文件的路径及文件名~~~~~file设置打印的文件的路径及文件名，建议绝对路径&ndash;&gt;-->
<!--        <file>${logging.path}/log_debug.log</file>-->

<!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            &lt;!&ndash;指定日志格式&ndash;&gt;-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId}] %logger{50} -[%M] Line:%-3L- %msg%n</pattern>-->
<!--            &lt;!&ndash; 设置字符集 &ndash;&gt;-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->

<!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
<!--        &lt;!&ndash; 日志记录器的滚动策略-->
<!--            SizeAndTimeBasedRollingPolicy 按日期，大小记录日志-->
<!--            另外一种方式： rollingPolicy的class设置为ch.qos.logback.core.rolling.TimeBasedRollingPolicy-->
<!--        &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 日志归档 &ndash;&gt;-->
<!--            &lt;!&ndash; 归档的日志文件的路径，例如今天是2024-06-23日志，当前写的日志文件路径为file节点指定， 可以将此文件与file指定文件路径设置为不同路径，从而将当前日志文件或归档日志文件置不同的目录。 而2024-06-23的日志文件在由fileNamePattern指定。%d{yyyy-MM-dd}指定日期格式，%i指定索引 &ndash;&gt;-->
<!--            <fileNamePattern>${logging.path}/log-debug-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->

<!--            &lt;!&ndash; 配置日志文件不能超过100M，若超过100M，日志文件会以索引0开始，命名日志文件 例如error.20240623.0.txt &ndash;&gt;-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>50MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->

<!--            &lt;!&ndash;日志文档保留天数,以防止日志填满整个磁盘空间&ndash;&gt;-->
<!--            <maxHistory>15</maxHistory>-->
<!--            &lt;!&ndash;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。&ndash;&gt;-->
<!--            <totalSizeCap>1GB</totalSizeCap>-->
<!--        </rollingPolicy>-->

<!--        &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
<!--        <append>true</append>-->

<!--        &lt;!&ndash; 此日志文档只记录debug级别的 &ndash;&gt;-->
<!--        &lt;!&ndash; 过滤策略：-->
<!--            LevelFilter ： 只打印level标签设置的日志级别-->
<!--            ThresholdFilter：打印大于等于level标签设置的级别，小的舍弃-->
<!--         &ndash;&gt;-->

<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            &lt;!&ndash; 过滤的日志级别 &ndash;&gt;-->
<!--            <level>debug</level>-->
<!--            &lt;!&ndash;匹配到就允许&ndash;&gt;-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            &lt;!&ndash;没有匹配到就禁止&ndash;&gt;-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 2.2 level为 INFO 日志，时间滚动输出  &ndash;&gt;-->
<!--    <appender name="INFO_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 正在记录的日志文档的路径及文档名 &ndash;&gt;-->
<!--        <file>${logging.path}/log_info.log</file>-->
<!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId}] %logger{50} -[%M] Line:%-3L- %msg%n</pattern>-->
<!--            <charset>UTF-8</charset>-->
<!--        </encoder>-->
<!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            &lt;!&ndash; 每天日志归档路径以及格式 &ndash;&gt;-->
<!--            <fileNamePattern>${logging.path}/web-info-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>50MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->

<!--            &lt;!&ndash;日志文档保留天数&ndash;&gt;-->
<!--            <maxHistory>15</maxHistory>-->

<!--            &lt;!&ndash;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。&ndash;&gt;-->
<!--            <totalSizeCap>1GB</totalSizeCap>-->
<!--        </rollingPolicy>-->

<!--        &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
<!--        <append>true</append>-->

<!--        &lt;!&ndash; 此日志文档只记录info级别的 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>info</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 2.3 level为 WARN 日志，时间滚动输出  &ndash;&gt;-->
<!--    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 正在记录的日志文档的路径及文档名 &ndash;&gt;-->
<!--        <file>${logging.path}/log_warn.log</file>-->
<!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId}] %logger{50} -[%M] Line:%-3L- %msg%n</pattern>-->
<!--            <charset>UTF-8</charset> &lt;!&ndash; 此处设置字符集 &ndash;&gt;-->
<!--        </encoder>-->
<!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${logging.path}/web-warn-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy-->
<!--                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>50MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--            &lt;!&ndash;日志文档保留天数&ndash;&gt;-->
<!--            <maxHistory>15</maxHistory>-->
<!--            &lt;!&ndash;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。&ndash;&gt;-->
<!--            <totalSizeCap>1GB</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
<!--        <append>true</append>-->
<!--        &lt;!&ndash; 此日志文档只记录warn级别的 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>warn</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 2.4 level为 ERROR 日志，时间滚动输出  &ndash;&gt;-->
<!--    <appender name="ERROR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">-->
<!--        &lt;!&ndash; 正在记录的日志文档的路径及文档名 &ndash;&gt;-->
<!--        <file>${logging.path}/log_error.log</file>-->
<!--        &lt;!&ndash;日志文档输出格式&ndash;&gt;-->
<!--        <encoder>-->
<!--            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{traceId}] %logger{50} -[%M] Line:%-3L- %msg%n</pattern>-->
<!--            <charset>UTF-8</charset> &lt;!&ndash; 此处设置字符集 &ndash;&gt;-->
<!--        </encoder>-->
<!--        &lt;!&ndash; 日志记录器的滚动策略，按日期，按大小记录 &ndash;&gt;-->
<!--        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">-->
<!--            <fileNamePattern>${logging.path}/web-error-%d{yyyy-MM-dd}.%i.log</fileNamePattern>-->
<!--            <timeBasedFileNamingAndTriggeringPolicy-->
<!--                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">-->
<!--                <maxFileSize>50MB</maxFileSize>-->
<!--            </timeBasedFileNamingAndTriggeringPolicy>-->
<!--            &lt;!&ndash;日志文档保留天数&ndash;&gt;-->
<!--            <maxHistory>15</maxHistory>-->
<!--            &lt;!&ndash;用来指定日志文件的上限大小，例如设置为1GB的话，那么到了这个值，就会删除旧的日志。&ndash;&gt;-->
<!--            <totalSizeCap>1GB</totalSizeCap>-->
<!--        </rollingPolicy>-->
<!--        &lt;!&ndash; 追加方式记录日志 &ndash;&gt;-->
<!--        <append>true</append>-->
<!--        &lt;!&ndash; 此日志文档只记录ERROR级别的 &ndash;&gt;-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>error</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender>-->

<!--    &lt;!&ndash; 2.5 日志异步到数据库  &ndash;&gt;-->
<!--    &lt;!&ndash; <appender name="DBAPPENDER" class="ch.qos.logback.classic.db.DBAppender">-->
<!--        <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">-->
<!--            <dataSource class="com.zaxxer.hikari.HikariDataSource">-->
<!--                <driverClassName>com.mysql.jdbc.Driver</driverClassName>-->
<!--                <jdbcUrl>jdbc:mysql://localhost:3306/albedo-new?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false</jdbcUrl>-->
<!--                <username>root</username>-->
<!--                <password>123456</password>-->
<!--                <poolName>HikariPool-logback</poolName>-->
<!--            </dataSource>-->
<!--        </connectionSource>-->
<!--        <filter class="ch.qos.logback.classic.filter.LevelFilter">-->
<!--            <level>info</level>-->
<!--            <onMatch>ACCEPT</onMatch>-->
<!--            <onMismatch>DENY</onMismatch>-->
<!--        </filter>-->
<!--    </appender> &ndash;&gt;-->

<!--    &lt;!&ndash;-->
<!--        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、 以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。-->
<!--        name:用来指定受此logger约束的某一个包或者具体的某一个类。-->
<!--        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别。-->
<!--        addtivity:是否向上级logger传递打印信息。默认是true。-->
<!--    &ndash;&gt;-->
<!--    <logger name="springfox.documentation.spring" level="error"/>-->
<!--    <logger name="org.springframework" level="error"/>-->
<!--    <logger name="tk.mybatis.mapper.autoconfigure" level="error"/>-->
<!--    <logger name="org.mybatis.spring.mapper" level="debug"/>-->
<!--    <logger name="org.apache" level="error"/>-->
<!--    <logger name="org.hibernate" level="error"/>-->
<!--    <logger name="com.alibaba" level="error"/>-->
<!--    <logger name="org.activiti.engine.impl.asyncexecutor" level="error"/>-->
<!--    &lt;!&ndash; show sql of activiti. &ndash;&gt;-->
<!--    <logger name="org.activiti.engine.impl.persistence.entity" level="error"/>-->

<!--    <logger name="com.framework.*.mapper" level="debug" additivity="false">-->
<!--        <appender-ref ref="CONSOLE" />-->
<!--    </logger>-->
<!--&lt;!&ndash;    <logger name="net.cnki.security" level="error" additivity="false">&ndash;&gt;-->
<!--&lt;!&ndash;        <appender-ref ref="CONSOLE" />&ndash;&gt;-->
<!--&lt;!&ndash;    </logger>&ndash;&gt;-->


<!--    &lt;!&ndash;-->
<!--        使用mybatis的时候，sql语句是debug下才会打印，而这里我们只配置了info，所以想要查看sql语句的话，有以下两种操作：-->
<!--        第一种把<root level="info">改成<root level="DEBUG">这样就会打印sql，不过这样日志那边会出现很多其他消息-->
<!--        第二种就是单独给dao下目录配置debug模式，代码如下，这样配置sql语句会打印，其他还是正常info级别：-->
<!--        【logging.level.org.mybatis=debug logging.level.dao=debug】-->
<!--     &ndash;&gt;-->

<!--    &lt;!&ndash;-->
<!--        root节点是必选节点，用来指定最基础的日志输出级别，只有一个level属性-->
<!--        level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，-->
<!--        不能设置为INHERITED或者同义词NULL。默认是DEBUG-->
<!--        可以包含零个或多个元素，标识这个appender将会添加到这个logger。-->
<!--    &ndash;&gt;-->

<!--    &lt;!&ndash; 4. 最终的策略 &ndash;&gt;-->
<!--    &lt;!&ndash; 4.1 开发环境:打印控制台&ndash;&gt;-->
<!--    &lt;!&ndash; springProfile多环境日志输出，据不同环境（prod:生产环境，test:测试环境，dev:开发环境）来定义不同的日志输出&ndash;&gt;-->
<!--    &lt;!&ndash; <springProfile name="dev">-->
<!--        <logger name="net.cnki.modules.dao" level="debug"/>-->
<!--        <logger name="net.cnki.security" level="error"/>-->
<!--    </springProfile> &ndash;&gt;-->

<!--    <root level="info">-->
<!--        <appender-ref ref="CONSOLE" />-->
<!--        <appender-ref ref="DEBUG_FILE" />-->
<!--        <appender-ref ref="INFO_FILE" />-->
<!--        <appender-ref ref="WARN_FILE" />-->
<!--        <appender-ref ref="ERROR_FILE" />-->
<!--    </root>-->


<!--    &lt;!&ndash; <springProfile name="test">-->
<!--        <root level="debug">-->
<!--            <appender-ref ref="CONSOLE" />-->
<!--            <appender-ref ref="DEBUG_FILE" />-->
<!--            <appender-ref ref="INFO_FILE" />-->
<!--            <appender-ref ref="WARN_FILE" />-->
<!--            <appender-ref ref="ERROR_FILE" />-->
<!--        </root>-->
<!--    </springProfile> &ndash;&gt;-->

<!--    &lt;!&ndash; 可以启动服务的时候指定 profile （如不指定使用默认），如指定prod 的方式为：-->
<!--    java -jar xxx.jar –spring.profiles.active=prod&ndash;&gt;-->
<!--</configuration>-->
